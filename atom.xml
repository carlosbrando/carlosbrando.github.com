<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nome do Jogo]]></title>
  <link href="http://nomedojogo.com/atom.xml" rel="self"/>
  <link href="http://nomedojogo.com/"/>
  <updated>2011-10-21T10:23:38-02:00</updated>
  <id>http://nomedojogo.com/</id>
  <author>
    <name><![CDATA[Carlos Brando]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grok Podcast Extra - O que você achou?]]></title>
    <link href="http://nomedojogo.com/2011/10/18/grok-podcast-extra-o-que-voce-achou/"/>
    <updated>2011-10-18T14:08:00-02:00</updated>
    <id>http://nomedojogo.com/2011/10/18/grok-podcast-extra-o-que-voce-achou</id>
    <content type="html"><![CDATA[<p>O <a href="http://rubyconf2011.akitaonrails.com/br/index.html">RubyConf Brasil 2011</a> está chegando e o <a href="http://grokpodcast.com/">Grok Podcast</a> vai te ajudar a participar do evento sem gastar um centavo. Estamos sorteando até sexta-feira <strong>4 ingressos</strong> para o evento.</p>

<p>Para participar é fácil. Basta <a href="http://twitter.com/home?status=Participe%20da%20%23RubyConfBR%20by%20%23Locaweb%2C%20saiba%20mais%20sobre%20o%20evento%20em%20http%3A%2F%2Fgoo.gl%2FK5gHh%20e%20concorra%20a%204%20ingressos%20%2Fvia%20%23GrokPodcast">clicar aqui</a> ou publicar a mensagem abaixo no seu Twitter:</p>

<blockquote><p>Participe da #RubyConfBR by #Locaweb, saiba mais sobre o evento em http://goo.gl/K5gHh e concorra a 4 ingressos /via #GrokPodcast</p></blockquote>

<p>Aproveite que está no Twitter e me siga em <a href="http://twitter.com/#!/carlosbrando">@carlosbrando</a>. ;)</p>

<p>Esse episódio introduz um formato diferente. Episódios extras, fora da cronologia normal e patrocinados por uma empresa ou grupo. Não queremos em hipótese alguma fazer simples propaganda, pelo contrário somente conteúdo relevante e que agregue conhecimento serão aprovados para esse formato. Porém o patrocinador pode sugerir temas que estejam relacionados ao seu negócio.</p>

<p>Esse primeiro episódio é apenas um piloto. O objetivo principal do Grok Podcast é informar e compartilhar conhecimento e não necessariamente lucrar com isso, porém com o crescimento de nossa audiência nossos gastos tem aumentado muito e esses anunciantes nos ajudam a manter o podcast no ar.</p>

<p>Porém, nós estamos interessados em saber o que você achou desse piloto. Se você é um ouvinte, deixe um comentário dizendo como se sente em relação a esses episódios extras e quais as suas expectativas.</p>

<p>O mesmo vale caso você tenha interesse em anunciar na série regular ou patrocinar um episódio extra. Nesse caso, entre em contato através da nossa <a href="http://grokpodcast.com/contato/">página de contato</a> e explicaremos em mais detalhes como isso funciona.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contratos onde todos ganham]]></title>
    <link href="http://nomedojogo.com/2011/09/12/contratos-onde-todos-ganham/"/>
    <updated>2011-09-12T11:09:00-03:00</updated>
    <id>http://nomedojogo.com/2011/09/12/contratos-onde-todos-ganham</id>
    <content type="html"><![CDATA[<p>Lidar com computadores não é fácil, por outro lado lidar com pessoas costuma ser ainda mais complicado. A muito tempo eu já me convenci que o relacionamento entre clientes e programadores sempre serão problemáticos.</p>

<p>A forma mais simples de tentar diminuir a tensão entre os lados envolvidos são os contratos.</p>

<p>Um bom contrato deve deixar claro quais são os direitos e responsabilidades de cada um dos envolvidos. Também não deve deixar dúvidas sobre qual será a repercussão no caso de uma das partes não cumprir com o acordo.</p>

<p>Um tipo básico de contrato é o que define um preço fixo para o projeto. Esse tipo de contrato é a melhor opção para o cliente e a pior para o programador. Uma mudança no escopo ou um pequeno atraso e tudo vai para a conta do desenvolvedor, deixando todo o risco nas mãos do profissional. Normalmente esse é o tipo de contrato que mais dá problema, já que o programador costuma se sentir lesado por alterações no escopo do projeto e o cliente não se sente na obrigação de pagar mais por isso.</p>

<p>Por outro lado um contrato de tempo e recurso, onde o cliente paga pelo tempo de cada profissional alocado no projeto é o melhor contrato para o programador, mas é o pior para o cliente. Nesse caso, atrasos e alterações no escopo caem sempre na conta do cliente, mesmo quando a culpa não é dele.</p>

<p>Para beneficiar ambos os lados, talvez o mais interessante seja unir esses dois tipos de contratos em um contrato híbrido, onde o cliente e o programador definem um valor fixo menor e uma taxa por horas de trabalho.</p>

<p>Funciona mais ou menos assim: se você estimar que serão necessárias aproximadamente duas semanas (80 horas) para finalizar o projeto e normalmente você cobra R$ 100,00 por hora, então o custo estimado para o projeto seria de R$ 8.000. Nesse tipo de contrato você definiria então com o cliente um pagamento fixo no valor de R$ 4.000 e mais uma taxa de R$ 50,00 reais por hora trabalhada no projeto.</p>

<p>Se o projeto terminar dentro do prazo, o cliente terá pago exatamente o valor estimado para o projeto e todos ganham.</p>

<p>Se o projeto terminar antes da data, o cliente terá pago menos e você terá ganho mais. Digamos que o projeto seja finalizado com 60 horas trabalhadas. Então o cliente pagará R$ 7.000 pelo serviço, que é menos do que o esperado. E você receberá R$ 1.000 a mais do que você receberia pelas 60 horas trabalhadas. Mais uma vez, todos ganham.</p>

<p>Por outro lado, se algo acontecer e o projeto atrasar, então o cliente estará pagando adicionalmente metade da sua hora, dividindo assim igualmente o risco entre o cliente e o programador.</p>

<p>Não importa se você usa uma metodologia ágil ou um modelo mais tradicional, contratos são essenciais em qualquer negocio e não será diferente em desenvolvimento de software. O importante é que você nunca feche um negócio sem assinar um antes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como convencer sua equipe a usar um sistema de controle de versão]]></title>
    <link href="http://nomedojogo.com/2011/08/25/como-convencer-sua-equipe-a-usar-um-sistema-de-controle-de-vers-o/"/>
    <updated>2011-08-25T02:02:00-03:00</updated>
    <id>http://nomedojogo.com/2011/08/25/como-convencer-sua-equipe-a-usar-um-sistema-de-controle-de-vers-o</id>
    <content type="html"><![CDATA[<p>Desenvolver software sem um sistema de controle de versão (ou SCM do inglês source code management) pode parecer irreal para muitos dos leitores desse blog, mas é importante esclarecer que muitas empresas e profissionais ainda não entendem o valor desse tipo de ferramenta.</p>

<blockquote><p>Nota para o leitor: Se você não sabe o que é um SCM, recomendo ouvir a série sobre o assunto que gravamos recentemente para o <a href="http://grokpodcast.com/tag/scm/">Grok Podcast</a>.</p></blockquote>

<p>A situação fica ainda mais dramática quando um programador &#8220;iniciante&#8221;, porém esclarecido, trabalha em uma empresa que ainda armazena o código-fonte de seus projetos em um diretório no servidor ou somente no computador do desenvolvedor. Nesse caso, como convencer seus colegas de trabalho e principalmente o seu chefe que eles precisam adotar uma ferramenta para controlar o código?</p>

<p>A palavra-chave aqui é <strong>evangelização</strong>. Comece implementando o seu próprio SCM particular. Existem dezenas de opções open-source que podem ser instaladas localmente em sua máquina ou em um servidor da empresa que você tenha acesso. Essa iniciativa fará com que ao menos o seu código tenha uma certa medida de segurança, o que lhe trará um pouco de tranquilidade.</p>

<p>Com o tempo você, diferente de seus colegas, passará a ter a resposta para perguntas como: &#8220;Exatamente que alteração foi realizada no módulo XYZ?&#8221; e &#8220;Quem foi o responsável pela alteração que quebrou o software?&#8221;. É questão de tempo até que seu chefe e colegas se convençam das vantagens em adotar um sistema para gerenciar o código da sua empresa.</p>

<p>Ainda outra opção é fazer com que sua equipe ouça o <a href="http://grokpodcast.com/">Grok Podcast</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogando como um hacker]]></title>
    <link href="http://nomedojogo.com/2011/08/19/blogando-como-um-hacker/"/>
    <updated>2011-08-19T10:48:00-03:00</updated>
    <id>http://nomedojogo.com/2011/08/19/blogando-como-um-hacker</id>
    <content type="html"><![CDATA[<p>Depois que me acostumei a somente <a href="http://grokpodcast.com/">falar</a> e a escrever em sentenças de <a href="http://twitter.com/#!/carlosbrando">140 caracteres</a>, blogar tem se tornado cada vez mais raro. Mas esse blog ainda é a menina dos meus olhos e de forma alguma ficará abandonado.</p>

<p>Embora editar o audio do podcast dê um certo trabalho, falar é muito fácil. Da mesma forma, enviar uma mensagem pelo Twitter também já se tornou algo natural. Mas escrever um texto para o Nome do Jogo ainda exigia um certo ritual que não me agradava muito, que basicamente envolvia acessar a interface do Wordpress, escrever o post, editar os trechos de código no TextMate e exportar para HTML, editar as imagens, etc..</p>

<p>Acostumado com ferramentas ricas e ao mesmo tempo simplistas, eu já estava decidido a mudar a engine desse blog e abandonar o Wordpress. Porém durante muito tempo não consegui encontrar uma ferramenta que justificasse o esforço da migração.</p>

<p>Recentemente eu adquiri uma cópia do excelente aplicativo <a href="http://www.iawriter.com/">iA Writer</a> que é um editor de textos muito simples, que não possui nenhuma configuração e permite escrever usando a sintaxe do <a href="http://daringfireball.net/projects/markdown/">Markdown</a>. É engraçado, mas me livrar da preocupação com a formatação do texto reativou o meu prazer em escrever.</p>

<p>Outra ferramenta importante nessa equação é o <a href="http://octopress.org/">Octopress</a>, uma engine baseada no <a href="https://github.com/mojombo/jekyll">Jekyll</a> para a publicação de blogs. A simplicidade do Octopress me permitiu migrar todo o conteúdo do Nome do Jogo (quase mil artigos) rapidamente. O maior trabalho que tive na migração foi ajustar alguns textos, mas como tudo é baseado em arquivos: Regex to the rescue!</p>

<p><img class="center" src="http://farm7.static.flickr.com/6188/6058663657_21758df908_o.png"></p>

<p>O que você está vendo agora é o novo blog Nome do Jogo, totalmente baseado no Octopress e com o tema padrão da ferramenta. Acredito que isso vai tornar muito mais fácil publicar meus artigos e certamente vai aumentar a freqüência de publicação.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Regra Direita-Esquerda do C]]></title>
    <link href="http://nomedojogo.com/2011/06/13/a-regra-direita-esquerda-do-c/"/>
    <updated>2011-06-13T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2011/06/13/a-regra-direita-esquerda-do-c</id>
    <content type="html"><![CDATA[<p>Atualmente estou envolvido em um projeto envolvendo módulos específicos em Ruby, Erlang e C. Ruby e Erlang são mais tranquilos, mas C tem a desagradável característica de deixar alguns códigos &#8220;meio&#8221; complicados de entender.</p>

<p>Porém, um <a href="http://twitter.com/#!/marciogm">colega</a> da Plano Bê me enviou um artigo que me ajudou muito e quero compartilhá-lo com vocês. O <a href="http://ieng9.ucsd.edu/~cs30x/rt_lt.rule.html">artigo original</a> parece ter sido escrito por Rick Ord da Universidade da California, em San Diego. Segue a tradução:</p>

<h2>A Regra Direita-Esquerda do C</h2>

<p>A regra <strong>direta-esquerda</strong> é muito útil para decifrar declarações na linguagem C e também pode ser de grande ajuda ao escrever código. A regra é bem simples, toda vez que encontrar os seguintes símbolos no código, leia:</p>

<pre><code>*   como "um ponteiro para"      - sempre do lado esquerdo
[]  como "um array de"           - sempre do lado direito
()  como "uma função retornando" - sempre do lado direito
</code></pre>

<h2>Passo 1</h2>

<p>Encontre o identificador. Esse é o seu ponto de partida. Então, diga para si mesmo <em>&#8220;o identificador é&#8221;</em>. É nesse ponto que iniciamos a declaração.</p>

<h2>Passo 2</h2>

<p>Comece pelos símbolos a direita do identificador. Digamos que você encontrou um <code>()</code>, então você sabe que essa declaração é uma função. Então você deve dizer <em>&#8220;o identificador é uma função retornando&#8221;</em>. Caso você tenha encontrado um <code>[]</code>, então você deve dizer <em>&#8220;o identificador é um array de&#8221;</em>. Continue avançando pela direita enquanto houver símbolos OU até encontrar um fecha parênteses <code>)</code>. (continue seguindo caso você encontre um abre parênteses, falaremos sobre isso mais abaixo.)</p>

<h2>Passo 3</h2>

<p>Quando terminarem os símbolos a direita do identificador, então comece a procurar por símbolos a sua esquerda. Se você encontrar algo diferente dos símbolos mencionados acima (digamos, algo como <code>int</code>), simplesmente repita o seu nome. Caso contrário, traduza o símbolo para o português usando a tabela. Continue seguindo pela esquerda enquanto houver símbolos OU até encontrar um abre parênteses <code>(</code>.</p>

<p>Então, repita os passos 2 e 3 até terminar toda a sua declaração. Veja abaixo alguns exemplos:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">[];</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Encontre o identificador.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int *p[];
</span><span class='line'>     ^
</span><span class='line'>"p é"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Siga pela direita enquanto encontrar um símbolo ou abre parênteses.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int *p[];
</span><span class='line'>      ^^
</span><span class='line'>"p é um array de"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Quando não puder mais mover para a direita (os símbolo acabaram), então siga para a esquerda e encontre:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int *p[];
</span><span class='line'>    ^
</span><span class='line'>"p é um array de ponteiros para"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Continue seguinte pela esquerda e encontre:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int *p[];
</span><span class='line'>^^^
</span><span class='line'>"p é um array de ponteiros para int". 
</span><span class='line'>(ou "p é um array onde cada elemento é um ponteiro para um inteiro")</span></code></pre></td></tr></table></div></figure>


<p>Outro exemplo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">())();</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Encontre o identificador.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int *(*func())();
</span><span class='line'>       ^^^^
</span><span class='line'>"func é"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Vá para a direita.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int *(*func())();
</span><span class='line'>           ^^
</span><span class='line'>"func é uma função retornando"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Não dá para ir mais a direita devido ao fecha parênteses, então vá para a esquerda.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int *(*func())();
</span><span class='line'>      ^
</span><span class='line'>"func é uma função retornando um ponteiro para"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Não pode mais ir para a esquerda devido ao abre parênteses, então continue indo pela direita.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int *(*func())();
</span><span class='line'>              ^^
</span><span class='line'>"func é uma função retornando um ponteiro para uma função retornando"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Não dá mais para ir para a direita porque não há mais simbolos, então vá para a esquerda.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int *(*func())();
</span><span class='line'>    ^
</span><span class='line'>"func é uma função retornando um ponteiro para uma função retornando um ponteiro para"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>E finalmente, o último símbolo a esquerda.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int *(*func())();
</span><span class='line'>^^^
</span><span class='line'>"func é uma função retornando um ponteiro para uma função retornando um ponteiro para um inteiro".</span></code></pre></td></tr></table></div></figure>


<p>Como você pode ver, essa regra pode ser muito útil. Ela também é ótima para manter a sua sanidade enquanto estiver criando declarações, além de ajudá-lo a identificar onde colocar o próximo símbolo ou parênteses.</p>

<p>Algumas declarações podem parecer ainda mais complicadas quando definem o tamanho de um array ou informam uma lista de argumentos. Por exemplo, se você ver algo como <code>[3]</code>, deve ler <em>&#8220;um array (de tamanho 3) de&#8230;&#8221;</em>. Mas se você ver algo como <code>(char *,int)</code>, então deve ler <em>&#8220;uma função esperando (char </em>, int) e retornando&#8230;&#8221;*. Veja mais um exemplo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">fun_one</span><span class="p">)(</span><span class="kt">char</span> <span class="o">*</span><span class="p">,</span><span class="kt">double</span><span class="p">))[</span><span class="mi">9</span><span class="p">][</span><span class="mi">20</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Eu não vou seguir cada passo para decifrar essa declaração. Mas o resultado será: <em>&#8220;fun_one é um ponteiro para uma função esperando (char </em>, double) e retornando um ponteiro para um array (tamanho 9) de um array (tamanho 20) de inteiros&#8221;*.</p>

<p>Fica mais fácil se você remover o tamanho dos arrays e as listas de argumentos:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">fun_one</span><span class="p">)())[][];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Uma boa opção é decifrar dessa maneira e só depois adicionar o tamanho dos arrays e a lista de argumentos.</p>

<h2>Algumas considerações finais</h2>

<p>É totalmente possível criar declarações ilegais usando essa regra, então algum conhecimento do que é aceitável e do que não é em C é necessário. Por exemplo, se você tiver algo assim:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="p">((</span><span class="o">*</span><span class="n">fun_one</span><span class="p">)())[][];</span>
</span></code></pre></td></tr></table></div></figure>


<p>A declaração acima seria traduzida para <em>&#8220;fun_one é um ponteiro para uma função retornando um array de arrays de ponteiros para inteiros&#8221;</em>.</p>

<p>Uma vez que uma função não pode retornar um array, mas somente um ponteiro para um array, essa declaração é ilegal.</p>

<p>Combinações ilegais incluem:</p>

<pre><code>[]() - não pode haver um array de funções
()() - não pode haver uma função que retorna uma função
()[] - não pode haver uma função que retorna um array
</code></pre>

<p>Em todos os casos acima, você provavelmente precisaria de um conjunto de parênteses para colocar um símbolo <code>*</code> a esquerda entre cada <code>()</code> e <code>[]</code> para tornar uma declaração válida.</p>

<p>Segue abaixo alguns exemplos válidos e inválidos para exercitar o que aprendemos:</p>

<pre><code>int i;           "i um inteiro"
int *p;          "p é um ponteiro para um inteiro"
int a[];         "a é um array de inteiros"
int f();         "f é uma função retornando um inteiro"
int **pp;        "pp é um ponteiro para um ponteiro para um inteiro"
int (*pa)[];     "pa é um ponteiro para um array de inteiros"
int (*pf)();     "pf é um ponteiro para uma função retornando um inteiro"
int *ap[];       "ap é um array de ponteiros para inteiros"
int aa[][];      "aa é um array de arrays de inteiros"
int af[]();      "af é um array de funções retornando um inteiro (ILEGAL)"
int *fp();       "fp é uma função retornando um ponteiro para um inteiro"
int fa()[];      "fa é uma função retornando um array de inteiros (ILEGAL)"
int ff()();      "ff é uma função retornando uma função retornando um inteiro (ILEGAL)"
int ***ppp;      "ppp é um ponteiro para um ponteiro para um ponteiro para um inteiro"
int (**ppa)[];   "ppa é um ponteiro para um ponteiro para um array de inteiros"
int (**ppf)();   "ppf é um ponteiro para um ponteiro para uma função retornando um inteiro"
int *(*pap)[];   "pap é um ponteiro para um array de ponteiros para inteiros"
int (*paa)[][];  "paa é um ponteiro para um array de arrays de inteiros"
int (*paf)[]();  "paf é um ponteiro para um array de funções retornando um inteiro (ILEGAL)"
int *(*pfp)();   "pfp é um ponteiro para uma função retornando um ponteiro para um inteiro"
int (*pfa)()[];  "pfa é um ponteiro para uma função retornando um array de inteiros (ILEGAL)"
int (*pff)()();  "pff é um ponteiro para uma função retornando uma função retornando um inteiro (ILEGAL)"
int **app[];     "app é um array de ponteiros para ponteiros para um inteiro"
int (*apa[])[];  "apa é um array de ponteiros para um array de inteiros"
int (*apf[])();  "apf é um array de ponteiros para funções retornando um inteiro"
int *aap[][];    "aap é um array de arrays de ponteiros para inteiros"
int aaa[][][];   "aaa é um array de arrays de arrays de inteiros"
int aaf[][]();   "aaf é um array de arrays de funções retornando um inteiro (ILEGAL)"
int *afp[]();    "afp é um array de funções retornando um ponteiro para um inteiro (ILEGAL)"
int afa[]()[];   "afa é um array de funções retornando um array de inteiros (ILEGAL)"
int aff[]()();   "aff é um array de funções retornando funções retornando um inteiro (ILEGAL)"
int **fpp();     "fpp é uma função retornando um ponteiro para um ponteiro para um inteiro"
int (*fpa())[];  "fpa é uma função retornando um ponteiro para um array de inteiros"
int (*fpf())();  "fpf é uma função retornando um ponteiro para uma função retornando um inteiro"
int *fap()[];    "fap é uma função retornando um array de ponteiros para inteiros (ILEGAL)"
int faa()[][];   "faa é uma função retornando um array de arrays de inteiros (ILEGAL)"
int faf()[]();   "faf é uma função retornando um array de funções retornando inteiros (ILEGAL)"
int *ffp()();    "ffp é uma função retornando uma função retornando um ponteiro para um inteiro (ILEGAL)"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colorific]]></title>
    <link href="http://nomedojogo.com/2011/06/03/colorific/"/>
    <updated>2011-06-03T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2011/06/03/colorific</id>
    <content type="html"><![CDATA[<p>Já faz algum tempo que desenvolvi uma gem para imprimir o resultado dos meus testes de uma forma mais intuitiva, menos poluída e mais&#8230; <strong><span style="color: #ff0000;">c</span><span style="color: #ff9900;">o</span><span style="color: #ff00ff;">l</span><span style="color: #339966;">o</span><span style="color: #0000ff;">r</span><span style="color: #666699;">i</span><span style="color: #993366;">d</span><span style="color: #333399;">a</span></strong>! Não sei bem porque, mas não divulguei muito essa gem na época. De qualquer forma, ai está:</p>

<iframe width="560" height="349" src="http://www.youtube.com/embed/BQm4nFlJcco" frameborder="0" allowfullscreen></iframe>


<p>Para instalar é fácil, basta adicionar o seguinte código no seu arquivo Gemfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'colorific', :group => :test</span></code></pre></td></tr></table></div></figure>


<p>Se desejar contribuir com algo, essa biblioteca tem 78 linhas de código apenas. E todo o código encontra-se no GitHub: <a href="https://github.com/carlosbrando/colorific/blob/master/lib/colorific.rb">https://github.com/carlosbrando/colorific/blob/master/lib/colorific.rb</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quem disse que gravar um podcast é fácil?]]></title>
    <link href="http://nomedojogo.com/2011/03/29/quem-disse-que-gravar-um-podcast-e-facil/"/>
    <updated>2011-03-29T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2011/03/29/quem-disse-que-gravar-um-podcast-e-facil</id>
    <content type="html"><![CDATA[<p>Não deixe de acompanhar semanalmente o <a href="http://grokpodcast.com/">Grok Podcast</a>!</p>

<p><audio controls='controls'><source src='http://old.nomedojogo.com/wp-content/uploads/2011/03/Rafael-Rosa-Bruno-Douglas-Campos-on-2011-02-24-at-21.51.output.mp3 ' type='audio/mp3'/></audio></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convite para o Grok Podcast!]]></title>
    <link href="http://nomedojogo.com/2011/03/24/convite-para-o-grok-podcast/"/>
    <updated>2011-03-24T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2011/03/24/convite-para-o-grok-podcast</id>
    <content type="html"><![CDATA[<p>Um convite formal para o próximo convidado especial do <a href="http://grokpodcast.com/">Grok Podcast</a>!</p>

<p><audio controls='controls'><source src='http://old.nomedojogo.com/wp-content/uploads/2011/03/Rafael-Rosa-Bruno-Douglas-Campos-on-2011-02-24-at-22.33.output.mp3 ' type='audio/mp3'/></audio></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quatro anos de Nome do Jogo]]></title>
    <link href="http://nomedojogo.com/2011/02/08/quatro-anos-de-nome-do-jogo/"/>
    <updated>2011-02-08T00:00:00-02:00</updated>
    <id>http://nomedojogo.com/2011/02/08/quatro-anos-de-nome-do-jogo</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://old.nomedojogo.com/wp-content/uploads/2011/02/247607315_a74fac5aa4.jpg" width="500" height="332"></p>

<p>Hoje completam quatro anos desde que comecei a escrever esse blog. No total são 812 artigos e 4.305 comentários. Sempre mantive um ritmo muito bom de publicação, porém com o crescimento do Twitter (<a href="http://twitter.com/#!/carlosbrando">@carlosbrando</a>) como ferramenta de comunicação o tempo entre um artigo e outro diminuiu muito, eu tenho de confessar.</p>

<p>Escrever e manter um blog por tanto tempo não é fácil, principalmente se você tem a intenção de publicar conteúdo de qualidade. Mas as recompensas valem muito a pena, nesses quatro anos esse blog gerou dois livros, muitos vídeos, um podcast semanal sobre <a href="http://podcast.rubyonrails.pro.br/">Ruby on Rails</a> e agora o <a href="http://grokpodcast.com/">Grok Podcast</a>. Sem contar todas as outras oportunidades que apareceram graças a essa iniciativa.</p>

<p>Obrigado pela audiência!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grok Podcast 16 - O livro Rework]]></title>
    <link href="http://nomedojogo.com/2011/01/27/grok-podcast-16-%25e2%2580%2593-o-livro-rework/"/>
    <updated>2011-01-27T00:00:00-02:00</updated>
    <id>http://nomedojogo.com/2011/01/27/grok-podcast-16-%e2%80%93-o-livro-rework</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://grokpodcast.com/wp-content/uploads/2011/01/header.jpg"></p>

<p>Depois de um bom período de férias, estamos de volta com o <a href="http://grokpodcast.com/">Grok Podcast</a>! E para começar o ano com tudo decidimos gravar uma série inteira sobre o controverso livro <a href="http://37signals.com/rework/">Rework</a> de Jason Fried e David Heinemeier Hansson (o criador do framework Ruby on Rails).</p>

<p>Serão ao todo três episódios comentando os pontos-chave de cada um dos capítulos do livro. Se você já leu o livro será como bater um papo sobre a leitura e se você ainda não teve a oportunidade de ler, será como um bom resumo para atiçar a sua curiosidade.</p>

<p>Espero que gostem e continuem acompanhando o <a href="http://grokpodcast.com/">Grok Podcast</a> nessa segunda temporada!</p>

<p>Você pode adicionar o podcast ao seu iTunes <a href="http://itunes.apple.com/us/podcast/grok-podcast/id393122038" target="_blank">clicando aqui</a> ou atráves do nosso <a href="http://grokpodcast.com/feed/" target="_blank">RSS</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como funcionam os métodos puts e print no Ruby]]></title>
    <link href="http://nomedojogo.com/2011/01/03/como-funcionam-os-metodos-puts-e-print-no-ruby/"/>
    <updated>2011-01-03T00:00:00-02:00</updated>
    <id>http://nomedojogo.com/2011/01/03/como-funcionam-os-metodos-puts-e-print-no-ruby</id>
    <content type="html"><![CDATA[<p>Se você já experimentou Ruby com certeza já conheceu os famosos métodos <code>puts</code>, <code>print</code> e outros semelhantes a esses. Talvez você tenha notado que esses métodos, diferente de como aprendemos, podem ser executados sem que seja necessário informar um objeto.</p>

<p>Se você vem de outra linguagem de programação talvez tenha logo especulado que eles sejam palavras reservadas do Ruby. Mas isso não é verdade. Ambos são métodos comuns, como qualquer outro. Veja por si mesmo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">send</span> <span class="ss">:puts</span><span class="p">,</span> <span class="s2">&quot;um texto qualquer&quot;</span>
</span><span class='line'><span class="c1"># =&gt; um texto qualquer</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como você pode ver no exemplo acima, esses métodos foram inteligentemente incluidos na classe <code>Object</code>, e como no Ruby tudo é um objeto&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="nb">send</span><span class="p">(</span><span class="ss">:class</span><span class="p">)</span> <span class="c1"># =&gt; Object</span>
</span></code></pre></td></tr></table></div></figure>


<h2>O módulo Kernel</h2>

<p>Embora esses métodos sejam disponibilizados por meio de <code>Object</code>, eles estão implementados em um módulo chamado <code>Kernel</code>, que é então incluido na classe.</p>

<p>O interessante é que você pode tirar proveito desse mecanismo. Se você adicionar um método ao módulo <code>Kernel</code> ele funcionará exatamente como os métodos citados acima. Veja:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Kernel</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">print_line</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s1">&#39;-&#39;</span> <span class="o">*</span> <span class="mi">20</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">print_line</span> <span class="c1"># =&gt; --------------------</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrospectiva 2010]]></title>
    <link href="http://nomedojogo.com/2010/12/31/retrospectiva-2010/"/>
    <updated>2010-12-31T00:00:00-02:00</updated>
    <id>http://nomedojogo.com/2010/12/31/retrospectiva-2010</id>
    <content type="html"><![CDATA[<p>Mais um ano bem agitado se passou. Muito trabalho e diversão fizeram de 2010 um excelente ano para mim. Porém, o que mais me marcou esse ano foi o meu retorno ao mundo dos podcasts (algo que pessoalmente gosto muito de fazer) com o <a href="http://grokpodcast.com/">Grok Podcast</a>.</p>

<p>Mas a brincadeira ainda não acabou, tenho muitos projetos na cabeça e espero poder colocá-los em prática no ano que se segue.</p>

<h2>Os artigos mais lidos do blog em 2010</h2>

<ul>
<li><a href="http://www.nomedojogo.com/2010/01/20/a-filosofia-do-ruby/">A Filosofia do Ruby</a></li>
<li><a href="http://www.nomedojogo.com/2010/02/17/programadores-incompetentes-sao-otimos-para-o-mercado/">Programadores incompetentes são ótimos para o mercado</a></li>
<li><a href="http://www.nomedojogo.com/2010/02/10/quer-se-tornar-um-programador-de-sucesso-pare-de-escrever-codigo/">Quer se tornar um programador de sucesso? Pare de escrever código</a></li>
<li><a href="http://www.nomedojogo.com/2010/02/03/o-efeito-do-codigo-na-mente-do-programador/">O Efeito do Código na Mente do Programador</a></li>
<li><a href="http://www.nomedojogo.com/2010/03/28/nao-se-fazem-mais-programadores-como-antigamente/">Não se fazem mais programadores como antigamente</a></li>
<li><a href="http://www.nomedojogo.com/2010/04/23/investir-em-ruby-era-muito-arriscado/">Investir em Ruby era muito arriscado</a></li>
<li><a href="http://www.nomedojogo.com/2010/04/20/migrando-do-textmate-para-o-textmate/">Migrando do Textmate para o Textmate</a></li>
<li><a href="http://www.nomedojogo.com/2010/05/06/um-pseudo-intellisense-para-o-textmate/">Um pseudo-intellisense para o Textmate</a></li>
<li><a href="http://www.nomedojogo.com/2010/06/04/programadores-nem-sempre-o-time-que-esta-ganhando-esta-ganhando/">Programadores: Nem sempre o time que está ganhando está ganhando</a></li>
<li><a href="http://www.nomedojogo.com/2010/07/01/eu-quebrei-o-codigo/">“Eu quebrei o código”</a></li>
<li><a href="http://www.nomedojogo.com/2010/09/15/meu-novo-podcast/">Meu novo podcast</a></li>
</ul>


<p>Até o ano que vem!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singularidade e Biologia Sintética]]></title>
    <link href="http://nomedojogo.com/2010/12/22/singularidade-e-biologia-sintetica/"/>
    <updated>2010-12-22T00:00:00-02:00</updated>
    <id>http://nomedojogo.com/2010/12/22/singularidade-e-biologia-sintetica</id>
    <content type="html"><![CDATA[<p>Acabou de ir ao ar a última parte do <a href="http://grokpodcast.com/">Grok Podcast</a> que gravamos com o Elizer Pimentel e o Luis Gustavo da <a href="http://planobe.com.br/">Plano Bê</a> (a melhor empresa de tecnologia do mundo e do universo de acordo com o Luis&#8230; :P) sobre singularidade e biologia sintetica.</p>

<p><strong>Por que esse assunto é do interesse de programadores e desenvolvedores de software?</strong> Basicamente a biologia sintetica apresenta um novo hardware para programarmos e como tudo ainda é muito novo e desconhecido essa série promete abrir os seus horizontes quanto a um futuro possível dentro de nossa area de atuação. Além do mais é um assunto super divertido e fácil de absorver.</p>

<p>Eu e o Rafael Rosa estamos muito felizes com os resultados até agora com esse novo empreendimento do podcast e já temos muitos outros temas interessantes preparados para o ano que vem. Aguardem!</p>

<p>Para ouvir a série sobre singularidade e biologia sintetica na integra segue os links das três partes:</p>

<ul>
<li><a href="http://grokpodcast.com/2010/12/08/episodio-13-singularidade-e-biologia-sintetica-parte-1/">Parte 1</a></li>
<li><a href="http://grokpodcast.com/2010/12/15/episodio-14-%E2%80%93-singularidade-e-biologia-sintetica-%E2%80%93-parte-2/">Parte 2</a></li>
<li><a href="http://grokpodcast.com/2010/12/22/episodio-15-%E2%80%93-singularidade-e-biologia-sintetica-%E2%80%93-parte-3/">Parte 3</a></li>
</ul>


<p>Caso você tenha o interesse de anunciar no podcast, entre em contato conosco <a href="http://www.nomedojogo.com/contato/">clicando aqui</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O (comovente) guia de Ruby do Why em PDF]]></title>
    <link href="http://nomedojogo.com/2010/12/10/o-comovente-guia-de-ruby-do-why-em-pdf/"/>
    <updated>2010-12-10T00:00:00-02:00</updated>
    <id>http://nomedojogo.com/2010/12/10/o-comovente-guia-de-ruby-do-why-em-pdf</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://old.nomedojogo.com/wp-content/uploads/2010/12/blix-1.gif" width="796" height="251"></p>

<p>Não importa se você já é um rubista experiente ou está se aprendendo essa linguagem magnifica, &#8221;<strong>O (comovente) guia de Ruby do Why</strong>&#8221; é sem dúvida uma leitura obrigatória. A tradução do livro para português foi finalizada em 2009 e desde então você pode lê-lo na integra através do endereço: <a href="http://why.nomedojogo.com/index.html">why.nomedojogo.com</a>.</p>

<p>Recentemente Mairon D. Brasil, preparou um arquivo em PDF com o conteúdo do livro. Acredito que isso deve facilitar um pouco para aqueles que desejam imprimi-lo. Essa versão está disponível em seu blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyConf Brasil 2010 (slides e vídeo)]]></title>
    <link href="http://nomedojogo.com/2010/11/01/rubyconf-brasil-2010/"/>
    <updated>2010-11-01T00:00:00-02:00</updated>
    <id>http://nomedojogo.com/2010/11/01/rubyconf-brasil-2010</id>
    <content type="html"><![CDATA[<p>Aconteceu na semana passada o <strong>RubyConf Brasil 2010</strong> e o evento foi sem dúvida um sucesso em todos os sentidos. Principalmente, em minha opinião, pelo alto nível técnico da maioria das palestras.</p>

<p>Eu também tive o prazer de palestrar sobre minha experiencia desenvolvendo aplicativos sociais. Também foi uma palestra totalmente técnica, com muito código e uma demonstração de como criar um aplicativo simples do começo ao fim para a plataforma <strong>OpenSocial</strong> utilizando <strong>Rails 3</strong>. Cumprindo a minha promessa, abaixo você pode rever os slides da apresentação e o vídeo do desenvolvimento do aplicativo. Infelizmente o vídeo não tem som, então ele será mais útil para aqueles que assistiram a palestra.</p>

<p>Todas as palestras foram gravadas, assim eu acredito que em breve a <strong>Locaweb</strong> deve disponibilizá-los online.</p>

<h2>Slides</h2>


<div id="__ss_5629495" style="width: 425px;"><strong><a title="Desenvolvendo Aplicativos Sociais com Rails 3" href="http://www.slideshare.net/eduardobrando/desenvolvendo-aplicativos-sociais-com-rails-3">Desenvolvendo Aplicativos Sociais com Rails 3</a></strong><object id="__sse5629495" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="425" height="355" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always" /><param name="src" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=rubyconf-101031214321-phpapp01&amp;stripped_title=desenvolvendo-aplicativos-sociais-com-rails-3&amp;userName=eduardobrando" /><param name="name" value="__sse5629495" /><param name="allowfullscreen" value="true" /><embed id="__sse5629495" type="application/x-shockwave-flash" width="425" height="355" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=rubyconf-101031214321-phpapp01&amp;stripped_title=desenvolvendo-aplicativos-sociais-com-rails-3&amp;userName=eduardobrando" name="__sse5629495" allowscriptaccess="always" allowfullscreen="true"></embed></object>
<div style="padding: 5px 0 12px;">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/eduardobrando">Carlos Brando</a>.</div>
</div>


<h2>Vídeo</h2>


<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="480" height="385" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="src" value="http://www.youtube.com/v/C4eHP49-KtI?fs=1&amp;hl=en_US" /><param name="allowfullscreen" value="true" /><embed type="application/x-shockwave-flash" width="480" height="385" src="http://www.youtube.com/v/C4eHP49-KtI?fs=1&amp;hl=en_US" allowscriptaccess="always" allowfullscreen="true"></embed></object>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajude a melhorar o Grok Podcast]]></title>
    <link href="http://nomedojogo.com/2010/10/13/ajude-a-melhorar-o-grok-podcast/"/>
    <updated>2010-10-13T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2010/10/13/ajude-a-melhorar-o-grok-podcast</id>
    <content type="html"><![CDATA[<iframe src="https://spreadsheets.google.com/embeddedform?formkey=dFZXNnNnNXRQWmJPVl8tU2VSX29ybHc6MQ" width="760" height="695" frameborder="0" marginheight="0" marginwidth="0">Loading&#8230;</iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Os Bastidores do Rails 3]]></title>
    <link href="http://nomedojogo.com/2010/09/29/os-bastidores-do-rails-3/"/>
    <updated>2010-09-29T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2010/09/29/os-bastidores-do-rails-3</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://old.nomedojogo.com/wp-content/uploads/2010/09/why.jpg" title="A proposta do GrokPodcast é explicar e não somente noticiar" ></p>

<p>Faz exatamente um mês que o Rails 3 foi liberado na sua versão final. É o trabalho de mais de 1600 programadores em um período de quase dois anos.</p>

<p>Nessa versão tivemos uma grande alteração no sistema de queries do Active Record, a forma como costumavámos declarar rotas foi alterada, o Bundler foi adicionado ao projeto, um novo Action Mailer e muito código reescrito. Enquanto muitos recursos antigos foram melhorados, também dezenas de novas funcionalidades foram adicionadas. Certamente você já deve ter lido sobre essas novidades em outros sites e blogs.</p>

<p>Mas o que é levado em consideração pelo core team ao decidir se deve acrescentar ou não um novo recurso ao framework? O que é discutido nas reuniões desse time de elite?</p>

<p>O Grok Podcast inicia hoje uma nova série sobre os bastidores do Rails 3, com a participação especial de <a href="http://twitter.com/#!/josevalim">José Valim</a>, membro do core team do Ruby on Rails.</p>

<p>Você encontrará o primeiro episódio da série no <a href="http://grokpodcast.com/">site do programa</a>. Também estão disponíveis os dois primeiros episódios onde contamos a história da empresa Paypal.</p>

<p>Se você usa o iTunes é fácil adicionar o podcast na sua lista de programas, basta <a href="http://itunes.apple.com/us/podcast/grok-podcast/id393122038">clicar aqui</a>. Você também pode usa o <a href="http://grokpodcast.com/feed/">RSS</a> do site ou seguir o Grok Podcast no <a href="http://twitter.com/#!/grokpodcast">Twitter</a>.</p>

<p>Essa série sobre os bastidores do Rails 3 está sendo patrocinada pelos nossos amigos da <a href="http://www.egenialsas.com.br/">e-Genial</a> e da <a href="http://plataformatec.com.br/">Plataforma Tecnologia</a>.</p>

<p>Gostou do podcast? Então ajude a divulgá-lo. Fale dele para os seus amigos, comente no twitter, coloque um link no seu blog&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meu novo podcast]]></title>
    <link href="http://nomedojogo.com/2010/09/15/meu-novo-podcast/"/>
    <updated>2010-09-15T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2010/09/15/meu-novo-podcast</id>
    <content type="html"><![CDATA[<p>Durante o ano de 2008 eu gravei um programa semanal com as últimas noticias sobre <a href="http://podcast.rubyonrails.pro.br/">Ruby on Rails</a> junto com o <a href="http://www.akitaonrails.com/">Fábio Akita</a>. Infelizmente o programa não sobreviveu àquele ano.</p>

<p>Durante muito tempo eu planejei voltar a gravar o <a href="http://podcast.rubyonrails.pro.br/">Rails Podcast Brasil</a>, mas nenhuma das tentativas deu muito certo. Hoje felizmente não faz mais sentido um programa como aquele, já que noticias sobre Ruby e Rails podem ser facilmente encontradas em sites como o <a href="http://www.rubyinside.com.br/">Ruby Inside Brasil</a> e outros.</p>

<p>Mesmo assim eu ainda desejava voltar a gravar. Assim me juntei ao <a href="http://rafaelrosafu.com/">Rafael Rosa Fu</a> em um novo projeto: o <a href="http://grokpodcast.com/">Grok Podcast</a>!</p>

<p><a href="http://grokpodcast.com/"><img class="center" src="http://old.nomedojogo.com/wp-content/uploads/2010/09/Screen-shot-2010-09-15-at-1.47.56-PM-e1284569444802.png"></a></p>

<p>A intenção desse novo podcast é apresentar um único assunto por vez e aprofundar o máximo possível dentro desse tópico. Os episódios sempre girarão em torno de programação, empreendedorismo e tecnologia.</p>

<p>O primeiro episódio conta a história da empresa PayPal. Nos baseamos no livro <a href="http://www.foundersatwork.com/">Founders at Work</a> de Jessica Livingston, para contar sobre os primórdios da empresa. Acredito que esse tipo de conhecimento é prático para qualquer programador e principalmente para aqueles que pretendem iniciar o seu próprio negócio.</p>

<p>Espero que gostem e ajudem a divulgar esse novo projeto!</p>

<p>Grok Podcast: <a href="http://grokpodcast.com/">http://grokpodcast.com/</a></p>

<h2>Agradecimentos</h2>


<p>Eu gostaria de agradecer ao <a href="http://twitter.com/x4ids">Vinícius Machado</a> da <a href="http://www.x4ids.com.br/">X4-Internet Development Solutions</a> e a galera da <a href="http://anathumana.com.br/">Anathumana</a> pela trilha sonora que eles prepararam especialmente para este podcast.</p>

<p>Também tenho de agradecer ao <a href="http://rafael.tauil.com.br/">Rafael B. Tauil</a> pelo logo maneiro que ele desenvolveu para o projeto.</p>

<h2>Patrocinio</h2>


<p>Este primeiro episódio é patrocinado por <a href="http://webbynode.com/">Webbynode</a>. E foi com a ajuda deles que conseguimos esse site maneiro para o programa.</p>

<p>Se você deseja patrocinar ou ajudar o podcast de qualquer forma entre contato conosco através do formulário de contato desse <a href="http://www.nomedojogo.com/contato/">blog</a> ou do próprio <a href="http://grokpodcast.com/contato/">site oficial do podcast</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adicionando a documentação do Rails 3 ao dicionário do Mac OS X]]></title>
    <link href="http://nomedojogo.com/2010/09/07/adicionando-a-documentacao-do-rails-3-ao-dicionario-do-mac-os-x/"/>
    <updated>2010-09-07T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2010/09/07/adicionando-a-documentacao-do-rails-3-ao-dicionario-do-mac-os-x</id>
    <content type="html"><![CDATA[<p style="text-align: center;"><img class="aligncenter size-full wp-image-3464" src="http://old.nomedojogo.com/wp-content/uploads/2010/09/Screen-shot-2010-09-07-at-1.44.43-AM.png" alt="Uma pesquisa no Dictionary.app" width="675" height="434" /></p>


<p><a href="http://www.priithaamer.com/blog/rails-3-dictionary-update">Priit Haamer</a> liberou recentemente a documentação atualizada do Rails 3 para o aplicativo Dictionary.app do Mac OS X.</p>

<p>Para instalar é fácil, basta <a href="http://f.priithaamer.com/dictionary/Ruby%20on%20Rails%203.0.dictionary.zip">baixar o dicionário</a>, decompactá-lo e copiar o arquivo para o diretório <code>~/Library/Dictionaries</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uploading Files]]></title>
    <link href="http://nomedojogo.com/2010/08/22/uploading-files/"/>
    <updated>2010-08-22T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2010/08/22/uploading-files</id>
    <content type="html"><![CDATA[<p>A common task is uploading some sort of file, whether it&#8217;s a picture of a person or a CSV file containing data to process. The most important thing to remember with file uploads is that the form&#8217;s encoding <strong>MUST</strong> be set to &#8220;multipart/form-data&#8221;. If you&#8217;re using <code>form_for</code> just using <code>file_field</code> inside of it does the trick, but if you&#8217;re using <code>form_tag</code> <code>:multi_part =&gt; true</code> must passed as an HTML option, in the second options hash. If you forget to do this the file will not be uploaded.</p>
]]></content>
  </entry>
  
</feed>
