<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categoria: opiniao | Nome do Jogo]]></title>
  <link href="http://nomedojogo.com/categories/opiniao/atom.xml" rel="self"/>
  <link href="http://nomedojogo.com/"/>
  <updated>2011-10-24T21:20:43-02:00</updated>
  <id>http://nomedojogo.com/</id>
  <author>
    <name><![CDATA[Carlos Brando]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Contratos onde todos ganham]]></title>
    <link href="http://nomedojogo.com/2011/09/12/contratos-onde-todos-ganham/"/>
    <updated>2011-09-12T11:09:00-03:00</updated>
    <id>http://nomedojogo.com/2011/09/12/contratos-onde-todos-ganham</id>
    <content type="html"><![CDATA[<p>Lidar com computadores não é fácil, por outro lado lidar com pessoas costuma ser ainda mais complicado. A muito tempo eu já me convenci que o relacionamento entre clientes e programadores sempre serão problemáticos.</p>

<p>A forma mais simples de tentar diminuir a tensão entre os lados envolvidos são os contratos.</p>

<p>Um bom contrato deve deixar claro quais são os direitos e responsabilidades de cada um dos envolvidos. Também não deve deixar dúvidas sobre qual será a repercussão no caso de uma das partes não cumprir com o acordo.</p>

<p>Um tipo básico de contrato é o que define um preço fixo para o projeto. Esse tipo de contrato é a melhor opção para o cliente e a pior para o programador. Uma mudança no escopo ou um pequeno atraso e tudo vai para a conta do desenvolvedor, deixando todo o risco nas mãos do profissional. Normalmente esse é o tipo de contrato que mais dá problema, já que o programador costuma se sentir lesado por alterações no escopo do projeto e o cliente não se sente na obrigação de pagar mais por isso.</p>

<p>Por outro lado um contrato de tempo e recurso, onde o cliente paga pelo tempo de cada profissional alocado no projeto é o melhor contrato para o programador, mas é o pior para o cliente. Nesse caso, atrasos e alterações no escopo caem sempre na conta do cliente, mesmo quando a culpa não é dele.</p>

<p>Para beneficiar ambos os lados, talvez o mais interessante seja unir esses dois tipos de contratos em um contrato híbrido, onde o cliente e o programador definem um valor fixo menor e uma taxa por horas de trabalho.</p>

<p>Funciona mais ou menos assim: se você estimar que serão necessárias aproximadamente duas semanas (80 horas) para finalizar o projeto e normalmente você cobra R$ 100,00 por hora, então o custo estimado para o projeto seria de R$ 8.000. Nesse tipo de contrato você definiria então com o cliente um pagamento fixo no valor de R$ 4.000 e mais uma taxa de R$ 50,00 reais por hora trabalhada no projeto.</p>

<p>Se o projeto terminar dentro do prazo, o cliente terá pago exatamente o valor estimado para o projeto e todos ganham.</p>

<p>Se o projeto terminar antes da data, o cliente terá pago menos e você terá ganho mais. Digamos que o projeto seja finalizado com 60 horas trabalhadas. Então o cliente pagará R$ 7.000 pelo serviço, que é menos do que o esperado. E você receberá R$ 1.000 a mais do que você receberia pelas 60 horas trabalhadas. Mais uma vez, todos ganham.</p>

<p>Por outro lado, se algo acontecer e o projeto atrasar, então o cliente estará pagando adicionalmente metade da sua hora, dividindo assim igualmente o risco entre o cliente e o programador.</p>

<p>Não importa se você usa uma metodologia ágil ou um modelo mais tradicional, contratos são essenciais em qualquer negocio e não será diferente em desenvolvimento de software. O importante é que você nunca feche um negócio sem assinar um antes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Como convencer sua equipe a usar um sistema de controle de versão]]></title>
    <link href="http://nomedojogo.com/2011/08/25/como-convencer-sua-equipe-a-usar-um-sistema-de-controle-de-vers-o/"/>
    <updated>2011-08-25T02:02:00-03:00</updated>
    <id>http://nomedojogo.com/2011/08/25/como-convencer-sua-equipe-a-usar-um-sistema-de-controle-de-vers-o</id>
    <content type="html"><![CDATA[<p>Desenvolver software sem um sistema de controle de versão (ou SCM do inglês source code management) pode parecer irreal para muitos dos leitores desse blog, mas é importante esclarecer que muitas empresas e profissionais ainda não entendem o valor desse tipo de ferramenta.</p>

<blockquote><p>Nota para o leitor: Se você não sabe o que é um SCM, recomendo ouvir a série sobre o assunto que gravamos recentemente para o <a href="http://grokpodcast.com/tag/scm/">Grok Podcast</a>.</p></blockquote>

<p>A situação fica ainda mais dramática quando um programador "iniciante", porém esclarecido, trabalha em uma empresa que ainda armazena o código-fonte de seus projetos em um diretório no servidor ou somente no computador do desenvolvedor. Nesse caso, como convencer seus colegas de trabalho e principalmente o seu chefe que eles precisam adotar uma ferramenta para controlar o código?</p>

<p>A palavra-chave aqui é <strong>evangelização</strong>. Comece implementando o seu próprio SCM particular. Existem dezenas de opções open-source que podem ser instaladas localmente em sua máquina ou em um servidor da empresa que você tenha acesso. Essa iniciativa fará com que ao menos o seu código tenha uma certa medida de segurança, o que lhe trará um pouco de tranquilidade.</p>

<p>Com o tempo você, diferente de seus colegas, passará a ter a resposta para perguntas como: "Exatamente que alteração foi realizada no módulo XYZ?" e "Quem foi o responsável pela alteração que quebrou o software?". É questão de tempo até que seu chefe e colegas se convençam das vantagens em adotar um sistema para gerenciar o código da sua empresa.</p>

<p>Ainda outra opção é fazer com que sua equipe ouça o <a href="http://grokpodcast.com/">Grok Podcast</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idéias são apenas multiplicadores de execuções]]></title>
    <link href="http://nomedojogo.com/2008/07/11/ideias-sao-apenas-multiplicadores-de-execucoes/"/>
    <updated>2008-07-11T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2008/07/11/ideias-sao-apenas-multiplicadores-de-execucoes</id>
    <content type="html"><![CDATA[<p>Eu já tinha visto isto em algum lugar mas não me lembro mais onde, de qualquer forma <strong>Derek Sivers</strong> me relembrou no seu mini-artigo no site <a href="http://www.oreillynet.com/onlamp/blog/2005/08/ideas_are_just_a_multiplier_of.html">ONLamp.com</a>:</p>

<p>É tão engraçado quando escuto as pessoas defendendo suas idéias. Para mim idéias não valem nada sem execução. Elas são apenas um multiplicador.</p>

<h2>Execuções valem milhões</h2>

<p>Explicando melhor:</p>

<pre><code>Uma péssima idéia = -1
Uma idéia fraca = 1
Uma idéia mais ou menos = 5
Uma boa idéia = 10
Uma ótima idéia = 15
Uma idéia brilhante = 20

nenhuma execução = $1
Uma execução fraca = $1000
Uma execução mais ou menos = $10,000
Uma boa execução = $100,000
Uma ótima execução = $1,000,000
Uma execução brilhante = $10,000,000
</code></pre>

<p>Para fazer um negócio é necessário multiplicar os dois. A idéia mais brilhante, sem nenhuma execução vale 20 dólares. Uma idéia brilhante com uma ótima execução vale 20 milhões de dólares.</p>

<p>É por isto que não quero ouvir as idéias das pessoas. Não estou interessado até ver a sua execução.</p>

<h2>Meu parecer</h2>

<p>Concordo com Derek, mas ainda existe um fator que não pode ser desconsiderado: a saturação do mercado.</p>

<p>Isto me fez lembrar do filme "Ligeiramente Grávidos" onde Ben Stone e seus amigos tem a idéia "brilhante" de criar um site com registros do momento exato onde atrizes famosas aparecem nuas em seus filmes. O problema é quando eles descobrem que já existe um site exatamente assim...</p>

<p>Acho que a fórmula correta seria algo assim:</p>

<pre><code>Idéia * Execução / Fator de Saturação do Mercado
</code></pre>

<p>Chega de ter idéias... vamos à execução!</p>
]]></content>
  </entry>
  
</feed>
