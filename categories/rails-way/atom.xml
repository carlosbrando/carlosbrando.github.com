<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categoria: Rails Way | Nome do Jogo]]></title>
  <link href="http://nomedojogo.com/categories/rails-way/atom.xml" rel="self"/>
  <link href="http://nomedojogo.com/"/>
  <updated>2011-10-24T21:20:43-02:00</updated>
  <id>http://nomedojogo.com/</id>
  <author>
    <name><![CDATA[Carlos Brando]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Assuma seus erros]]></title>
    <link href="http://nomedojogo.com/2009/05/26/assuma-seus-erros/"/>
    <updated>2009-05-26T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2009/05/26/assuma-seus-erros</id>
    <content type="html"><![CDATA[<p><img src="http://old.nomedojogo.com/wp-content/uploads/2009/05/03082007.jpg" alt="03082007" title="03082007" class="aligncenter size-full wp-image-2551" />
Em um processo natural de desenvolvimento, todo profissional começa sua carreira como um programador iniciante e com o tempo passa a assumir cada vez mais responsabilidades com respeito ao projeto, ou projetos, da empresa para qual está prestando serviços. Este aumento da carga de responsabilidades é um indicador de que o seu trabalho esta sendo valorizado e que sua carreira está avançando.</p>

<p>Assumir responsabilidades é um dos pilares da profissão de programador. Mas tão importante quanto assumir responsabilidades, é também assumir seus erros. Seja honesto consigo mesmo, todos somos suscetíveis a falhas.</p>

<p>Em um antigo emprego já tive a oportunidade de liderar uma equipe com excelentes programadores, 100% de cobertura de testes, uma boa documentação e mesmo assim as coisas deram errado. Somos seres humanos e cometemos erros. A forma como lidamos com estas situações é que mostra o quão profissionais somos.</p>

<p>Ser arrogante não significa esconder seus erros. Eu valorizo pessoas que assumem suas ignorâncias e seus erros, e mais ainda os que se esforçam para aprender com eles.</p>

<p>É uma pena que tantas pessoas em cargos de responsabilidade congelem suas carreiras no meio da subida. Porque na minha visão, ter a coragem e a honestidade de assumir seus erros é um passo importante antes de chegar ao topo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bons programadores são feitos com um pouco por dia]]></title>
    <link href="http://nomedojogo.com/2009/05/11/bons-programadores-sao-feitos-com-um-pouco-por-dia/"/>
    <updated>2009-05-11T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2009/05/11/bons-programadores-sao-feitos-com-um-pouco-por-dia</id>
    <content type="html"><![CDATA[<p>Gosto de uma passagem do famoso livro "The Pragmatic Programmer: From Journeyman to Master" que diz o seguinte:</p>

<p style="padding-left: 30px;">Um turista visitando o Eton College na Inglaterra perguntou ao jardineiro como ele conseguia deixar o gramado tão perfeito. "É fácil", ele replicou. "Você só precisa remover o orvalho cada manhã, cortar a cada dois dias e enrola-lo uma vez por semana."</p>


<p style="padding-left: 30px;">"É só isso?", perguntou o turista.</p>


<p style="padding-left: 30px;">"Absolutamente", replicou o jardineiro. "Faça isso por 500 anos e você terá um belo gramado."</p>


<p>Bons gramados precisam de um pouco de cuidado todos os dias. Bons programadores também.</p>

<p>{% img center http://old.nomedojogo.com/wp-content/uploads/2009/05/332590188_5b1baa142e.jpg %}</p>

<p>Eu adotei esta tecnica a algum tempo, todos os dias eu tento aprender algo novo ou me aprofundar um pouco mais em algo que já conheço. Ao contrário do que muita gente pode pensar, isto não tem nada a ver com manter-se informado. Estar em dia com o que está acontecendo no mundo é muito importante para qualquer tipo de profissional, mas o conhecimento adquirido pela leitura de feeds, por exemplo, não é necessariamente algo que aumente o seu valor como profissional. Estou falando de estudar de verdade, mesmo que seja por <strong>5 minutos</strong>, todos os dias.</p>

<p>Durante todo o ano passado eu tentei manter neste blog uma série diária sobre o que viria de novo nas próximas versões do Rails, e isto me ajudou a me manter atualizado ao mesmo tempo que me forçava a analisar cada vez mais profundamente o seu código. Hoje ainda continuo analisando o código, mas não escrevo mais com tanta frequência, já que agora muita gente resolveu fazer o mesmo.</p>

<p>Analisar o código de outras pessoas é um excelente meio de aprendizado. Como todo bom programador, não gostamos de ler documentação, gostamos de ler código. Mesmo programadores iniciantes podem tirar muito proveito ao participar de projetos open source.</p>

<p>Diferente de gramados, nós programadores ao adotar um regime sério de estudo diário, podemos ver os resultados em pouquíssimo tempo. E com o passar dos anos você ficará surpreso ao ver o quanto amadureceu como profissional.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Não codifique no piloto automático]]></title>
    <link href="http://nomedojogo.com/2009/05/05/nao-codifique-no-piloto-automatico/"/>
    <updated>2009-05-05T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2009/05/05/nao-codifique-no-piloto-automatico</id>
    <content type="html"><![CDATA[<p>Talvez você não concorde com tudo que eu escrevo por aqui, mas tem uma coisa que é praticamente unanime entre todos os programadores: reuniões são uma tremenda perda de tempo.</p>

<p>Reuniões nos fazem perder muito tempo que poderíamos estar programando, mas é um mal necessário. Uma reunião é um momento em que todos os envolvidos no projeto param para <strong>pensar</strong> no que estão fazendo. E é neste momento que são tomadas as decisões sobre como fazer o que quer que seja que você precise fazer.</p>

<p>Mas ainda mais importante que pensar no que precisa ser feito, é pensar no que você está fazendo enquanto você está fazendo. Não estou falando de parar por alguns instantes antes de começar a escrever código e pensar em como você vai escrever determinada funcionalidade. Estou falando de um processo contínuo de meditação - toda decisão que precisa ser tomada deve envolver um processo (mesmo que rápido) de meditação antes - que deve ocorrer a todo momento. Este processo é critico e deve envolver todos os aspectos da sua vida.</p>

<p>{% img center http://old.nomedojogo.com/wp-content/uploads/2009/05/791385521_88ec165c29.jpg %}</p>

<p>A maioria dos programadores codifica no piloto automático. Isto é um problema grave, porque você deixa o seu inconsciente tomar as decisões por você, quando na verdade cada decisão tomada deveria ser analisada antes. Seu cérebro é uma ferramenta surpreendente, com um pouco de esforço você pode tomar o controle e focalizar seus pensamentos de verdade na execução da tarefa que você está realizando.</p>

<p>No inicio isto pode parecer uma tarefa difícil, talvez seja necessário realizar certas pausas a cada 10 ou 5 minutos somente para pensar no que você está fazendo, mas com o tempo você conseguirá fazer isto de forma consciente ao mesmo tempo em que continua escrevendo. Mas nunca deixe esta tarefa no piloto automático.</p>

<p>PENSE! Não considere pausas para pensar como tempo perdido. Com o passar do tempo você perceberá que está mais envolvido com o trabalho e que você entende melhor o negócio da empresa para qual está trabalhando. O tempo gasto será pago, já que você será mais eficiente. E principalmente, você gastará menos tempo em reuniões já que você provavelmente já terá pensado na maioria dos problemas antes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programar não é só codificar]]></title>
    <link href="http://nomedojogo.com/2009/04/27/programar-nao-e-so-codificar/"/>
    <updated>2009-04-27T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2009/04/27/programar-nao-e-so-codificar</id>
    <content type="html"><![CDATA[<p>Tecnologia é um bem de consumo. Ter um carro potente é excelente, mas não faz você dirigir melhor. Ter um computador de ultima geração é muito bom, mas não permite necessariamente que você faça mais coisas em menos tempo.</p>

<p>Prega-se por toda a parte que programadores Ruby são mais produtivos e mais pragmáticos. Mas Ruby, assim como qualquer outra tecnologia é somente um bem de consumo. Um bom motorista, continuará sendo um bom motorista independente do carro que esteja dirigindo. Assim como um bom programador, continuará sendo um bom programador independente da linguagem de programação que estiver utilizando.</p>

<p>Programar não é apenas codificar. Como desenvolvedores de software precisamos entender o que estamos criando, precisamos entrar de cabeça no negócio da empresa para qual estamos trabalhando. Conheço péssimos programadores que desempenham papeis importantes nas empresas em que trabalham, não pelo seu conhecimento técnico, mas pelo seu domínio do negócio da empresa.</p>

<p>{% img center http://old.nomedojogo.com/wp-content/uploads/2009/04/2700243366_6fe67d8d1d.jpg %}</p>

<p>Quem é mais produtivo, o cara que conhece todas as minucias da linguagem ou o cara que conhece todos os processos da empresa? Saber conversar com o seu cliente na "língua dele" é essencial. Imagine a expressão de satisfação no rosto do seu cliente se ao lhe perguntar: "Você sabe o que é um HPA456?", você respondesse: "Sim, mas você não acha que utilizar um PDT8954 seria mais interessante para o seu negócio?".</p>

<p>Para sermos produtivos precisamos ser pró-ativos. Mas para sermos pró-ativos temos de saber o que precisa ser feito.</p>

<p>Não leia apenas artigos técnicos, mantenha-se em dia com o negócio do seu cliente. Leia revistas especializadas. Provavelmente você não entenderá tudo que ler, mas seja persistente. Converse com seu cliente sobre a área de atuação dele, tire suas duvidas. Conhecimento nunca é desperdiçado.</p>

<p>Não invista tanto em ferramentas e tecnologia, invista em conhecimento.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coçando a sua própria coceira]]></title>
    <link href="http://nomedojogo.com/2009/04/22/cocando-a-sua-propria-coceira/"/>
    <updated>2009-04-22T00:00:00-03:00</updated>
    <id>http://nomedojogo.com/2009/04/22/cocando-a-sua-propria-coceira</id>
    <content type="html"><![CDATA[<p style="text-align: center;"><img class="aligncenter size-full wp-image-2465" style="border: 2px solid black;" title="tiny-town-funny-girl-scratching-head" src="http://old.nomedojogo.com/wp-content/uploads/2009/04/tiny-town-funny-girl-scratching-head.jpg" alt="tiny-town-funny-girl-scratching-head" width="448" height="310" /></p>


<p>O termo "coçar a sua própria coceira" já é usado a muito tempo pela comunidade de desenvolvedores de projetos open source. Isto significa que eles estão constantemente resolvendo seus próprios problemas.</p>

<p>Conforme eu já mencionei em um artigo anterior, <a href="http://www.nomedojogo.com/2009/04/15/programar-e-dificil/">programar é difícil</a>. Sim, programar envolve assumir um série de responsabilidades e atividades que podem tornar o ato de codificar muito estressante. Durante o desenvolvimento de um software é comum aparecerem situações que exijam uma tomada rápida de decisão. Quantas linhas o usuário deverá visualizar por vez? Azul ou vermelho? Apagar o registro ou apenas marca-lo como apagado?</p>

<p>Afim de agilizar o desenvolvimento muitas vezes o programador decide por tomar estas decisões, e só delega esta responsabilidade ao cliente quando a questão é realmente séria. Cada decisão tomada pelo desenvolvedor se torna um novo débito no software, como uma bomba-relógio que pode explodir a qualquer momento. Ter conhecimento destas pequenas armadilhas dentro do projeto torna o desenvolvimento estressante e pode tirar o prazer do programador em escrever códigos.</p>

<p>Programadores open source não passam por isto, porque eles estão "coçando a sua própria coceira", eles estão resolvendo os problemas que eles mesmo tem. Ao tomar uma pequena decisão, eles não estão chutando, porque eles são os cliente e sabem exatamente o que é melhor para eles.</p>

<p>Programar envolve tomar decisões o tempo todo. Quando temos um profundo conhecimento sobre a necessidade que o software está suprindo, e principalmente quando somos o nosso próprio cliente não precisamos nos preocupar com estes chutes, tomamos decisões de uma forma suave e isto torna o desenvolvimento mais ágil e prazeroso. É por isto que tanta gente passa o dia inteiro escrevendo código no trabalho e ao chegar em casa ainda senta na frente do computador para trabalhar em algum projeto open source, é um exercício de relaxamento.</p>

<p>É possível levar esta experiencia para o trabalho, mas para que isto aconteça é necessário que você domine completamente o negócio da sua empresa. Entenda porque está escrevendo cada uma da funcionalidades do software em que está trabalhando. Entre de cabeça no trabalho que está realizando, torne-se o seu próprio cliente e comece a coçar a sua própria coceira.</p>

<p>Não importa se você está programando em Ruby, C# ou Java. Se está usando Rails ou Django. O que importa é se você realmente entende o trabalho que está realizando e se está contente com o que está fazendo.</p>
]]></content>
  </entry>
  
</feed>
