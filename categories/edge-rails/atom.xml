<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categoria: Edge Rails | Nome do Jogo]]></title>
  <link href="http://nomedojogo.com/categories/edge-rails/atom.xml" rel="self"/>
  <link href="http://nomedojogo.com/"/>
  <updated>2012-04-19T00:30:28-03:00</updated>
  <id>http://nomedojogo.com/</id>
  <author>
    <name><![CDATA[Carlos Brando]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[Edge Rails: Gerando rotas polimórficas a partir da classe de um modelo]]></title>
<link href="http://nomedojogo.com/2009/09/07/edge-rails-gerando-rotas-polimorficas-a-partir-da-classe-de-um-modelo/"/>
<updated>2009-09-07T00:00:00-03:00</updated>
<id>http://nomedojogo.com/2009/09/07/edge-rails-gerando-rotas-polimorficas-a-partir-da-classe-de-um-modelo</id>

      <content type="html"><![CDATA[<p>Exemplo do uso de rotas polimórficas para gerar a URL à partir da classe de um modelo:</p>

<p>``` ruby</p>

<pre><code>polymorphic_url(Comment) # equivalente ao comments_url()
# =&gt; "http://example.com/comments" 
</code></pre>

<p>```<p><a rel="bookmark" href="http://nomedojogo.com/2009/09/07/edge-rails-gerando-rotas-polimorficas-a-partir-da-classe-de-um-modelo/"></a></p></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Edge Rails: Adicionado suporte a I18n para plugins]]></title>
<link href="http://nomedojogo.com/2009/08/31/edge-rails-adicionado-suporte-a-i18n-para-plugins/"/>
<updated>2009-08-31T00:00:00-03:00</updated>
<id>http://nomedojogo.com/2009/08/31/edge-rails-adicionado-suporte-a-i18n-para-plugins</id>

      <content type="html"><![CDATA[<p>Agora ao criar um novo plugin para o Rails você pode adicionar suporte a internacionalização de uma forma bem simples. Basta adicionar seus arquivos de localização no diretório <code>config/locales/<em>*/</em>.{rb,yml}</code> dentro do diretório principal do seu plugin.</p>

<p>Não tem muito mais o que dizer a respeito desta novidade, mas como eu estava com saudade desta série do blog resolvi voltar com algo bem simples.</p>

<hr /><em>Todos os exemplos dados aqui funcionarão somente no <strong>Ruby on Rails 2.3.4 ou superior</strong>. Você pode encontrar mais detalhes sobre esta e outras novidades acompanhando a série <a href="http://www.nomedojogo.com/category/edge-rails/">Edge Rails</a>.</em>


<p><a rel="bookmark" href="http://nomedojogo.com/2009/08/31/edge-rails-adicionado-suporte-a-i18n-para-plugins/"></a></p>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[O novo sistema de interpolação de Strings do Ruby 1.9]]></title>
<link href="http://nomedojogo.com/2009/07/20/o-novo-sistema-de-interpolacao-do-ruby-1-9/"/>
<updated>2009-07-20T00:00:00-03:00</updated>
<id>http://nomedojogo.com/2009/07/20/o-novo-sistema-de-interpolacao-do-ruby-1-9</id>

      <content type="html"><![CDATA[<p>Embora o Ruby 1.9 já tenha sido liberado há algum tempo, infelizmente ele ainda é inacessível para muitos de nós, já que muitos projetos foram iniciados em versões mais antigas do Rails, quando ele ainda era incompatível com esta nova versão do Ruby. E mesmo aqueles que estão utilizando as versões mais recentes do Rails, também precisam tomar certos cuidados já que nem todos os plugins e gems já foram preparados e testados para serem executados nesta versão do Ruby.</p>

<p>Já faz um tempo que o core team do Rails vêm aceitando patches que implementam certos recursos presentes apenas no Ruby 1.9, permitindo que mesmo projetos rodando sob as versões 1.8.x também possam se beneficiar destas novas funcionalidades. Uma dessas novidades que recentemente foi incluída na versão de desenvolvimento do Rails (Edge Rails) e que estará presente no próximo release, foi o novo sistema de interpolação de Strings do Ruby 1.9.</p>

<p>Atualmente utilizamos muito o conhecido <code>#{}</code> para realizar esta atividade, como demonstrado no exemplo abaixo.</p>

<p>``` ruby</p>

<pre><code>firstname  = "Carlos"
familyname = "Brando"

puts "#{firstname} #{familyname}"
# =&gt; "Carlos Brando"
</code></pre>

<p>```</p>

<p>No Ruby 1.9, além da forma exibida acima, também podemos utilizar <code>%{}</code> para informar os valores a serem interpolados através de um objeto do tipo Hash. Seguindo a seguinte sintaxe:</p>

<p>``` ruby</p>

<pre><code>person = {:firstname =&gt; "Carlos", :familyname =&gt; "Brando"}

puts "%{firstname} %{familyname}" % person
# =&gt; "Carlos Brando"
</code></pre>

<p>```</p>

<p>Se você gosta de viver no limite e utiliza a versão de desenvolvimento do Rails em seus projetos, então já pode começar a utilizar este novo recurso, mesmo que ainda nem tenha o Ruby 1.9 instalado em seu computador. Mas, se você é um pouco mais conservador e não gosta de arriscar (o que pode evitar alguns problemas com bugs), você tem duas opções: esperar pelo Rails 2.3.3 (ou quem sabe o 3.0, não sei qual será o próximo) ou implantar você mesmo esta funcionalidade no seu projeto Rails atual.</p>

<p>Se você optou pela segunda opção, basta criar um arquivo qualquer no diretório <code>lib</code> do seu projeto e incluir o seguinte código nele:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>string.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">if</span> <span class="no">RUBY_VERSION</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="s1">&#39;1.9&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;=begin</span>
</span><span class='line'><span class="sr">  string.rb - Extension for String.&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Copyright</span> <span class="p">(</span><span class="n">C</span><span class="p">)</span> <span class="mi">2005</span><span class="o">-</span><span class="mi">2009</span> <span class="no">Masao</span> <span class="no">Mutoh</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  You may redistribute it and/o</span><span class="n">r</span> <span class="n">modify</span> <span class="n">it</span> <span class="n">under</span> <span class="n">the</span> <span class="n">same</span>
</span><span class='line'>  <span class="n">license</span> <span class="n">terms</span> <span class="n">as</span> <span class="no">Ruby</span><span class="o">.</span>
</span><span class='line'><span class="o">=</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;This feature is included in Ruby 1.9 or later but not occur TypeError.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="c1">#&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nb">String</span><span class="c1">#% method which accepts named arguments. Particularly useful if the&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">string</span> <span class="n">is</span> <span class="n">to</span> <span class="n">be</span> <span class="n">used</span> <span class="n">by</span> <span class="n">a</span> <span class="n">translator</span> <span class="n">because</span> <span class="n">named</span> <span class="n">arguments</span> <span class="n">mean</span> <span class="n">more</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;than %s/</span><span class="o">%</span><span class="n">d</span> <span class="n">style</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class String&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">unless</span> <span class="nb">instance_methods</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">m</span><span class="o">.</span><span class="n">to_s</span> <span class="o">==</span> <span class="s1">&#39;bytesize&#39;</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# For older ruby (such as ruby-1.8.5)</span>
</span><span class='line'><span class="sr">alias :bytesize :size</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">alias</span> <span class="ss">:_old_format_m</span> <span class="ss">:%</span> <span class="c1"># :nodoc:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">PERCENT_MATCH_RE</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  /</span><span class="sx">%%/,</span>
</span><span class='line'><span class="sx">  /%</span><span class="p">\{(\</span><span class="n">w</span><span class="o">+</span><span class="p">)\}</span><span class="o">/</span><span class="p">,</span><span class="sr"></span>
</span><span class='line'><span class="sr">  /%&amp;lt;(\w+)&amp;gt;(.*?\d*\.?\d*[bBdiouxXeEfgGcps])/</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # call-seq:</span>
</span><span class='line'><span class="sr">  #   %(arg)</span>
</span><span class='line'><span class="sr">  #   %(hash)</span>
</span><span class='line'><span class="sr">  #</span>
</span><span class='line'><span class="sr">  # Format - Uses str as a format specification, and returns the result of applying it to arg.</span>
</span><span class='line'><span class="sr">  # If the format specification contains more than one substitution, then arg must be</span>
</span><span class='line'><span class="sr">  # an Array containing the values to be substituted. See Kernel::sprintf for details of the</span>
</span><span class='line'><span class="sr">  # format string. This is the default behavior of the String class.</span>
</span><span class='line'><span class="sr">  #   * arg: an Array or other class except Hash.</span>
</span><span class='line'><span class="sr">  #   * Returns: formatted String</span>
</span><span class='line'><span class="sr">  # Example:</span>
</span><span class='line'><span class="sr">  #    &quot;%s, %s&quot; % [&quot;Masao&quot;, &quot;Mutoh&quot;]</span>
</span><span class='line'><span class="sr">  #</span>
</span><span class='line'><span class="sr">  # Also you can use a Hash as the &quot;named argument&quot;. This is recommended way so translators</span>
</span><span class='line'><span class="sr">  # can understand the meanings of the msgids easily.</span>
</span><span class='line'><span class="sr">  #   * hash: {:key1 =&gt; value1, :key2 =&gt; value2, ... }</span>
</span><span class='line'><span class="sr">  #   * Returns: formatted String</span>
</span><span class='line'><span class="sr">  # Example:</span>
</span><span class='line'><span class="sr">  #   For strings.</span>
</span><span class='line'><span class="sr">  #   &quot;%{firstname}, %{familyname}&quot; % {:firstname =&gt; &quot;Masao&quot;, :familyname =&gt; &quot;Mutoh&quot;}</span>
</span><span class='line'><span class="sr">  #</span>
</span><span class='line'><span class="sr">  #   With field type to specify format such as d(decimal), f(float),...</span>
</span><span class='line'><span class="sr">  #   &quot;%&lt;age&gt;d, %&lt;weight&gt;.1f&quot; % {:age =&gt; 10, :weight =&gt; 43.4}</span>
</span><span class='line'><span class="sr">  def %(args)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="nb">dup</span>
</span><span class='line'>  <span class="n">ret</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="no">PERCENT_MATCH_RE</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">match</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">match</span> <span class="o">==</span> <span class="s1">&#39;%%&#39;</span>
</span><span class='line'>      <span class="s1">&#39;%&#39;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vg">$1</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="vg">$1</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'>      <span class="n">args</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">?</span> <span class="n">args</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="p">:</span> <span class="n">match</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vg">$2</span>
</span><span class='line'>      <span class="n">key</span> <span class="o">=</span> <span class="vg">$2</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'>      <span class="n">args</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="p">?</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%</span><span class="si">#{</span><span class="vg">$3</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">args</span><span class="o">[</span><span class="n">key</span><span class="o">]</span><span class="p">)</span> <span class="p">:</span> <span class="n">match</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ret</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="nb">gsub</span><span class="p">(</span><span class="sr">/%([{&amp;lt;])/</span><span class="p">,</span> <span class="s1">&#39;%%\1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">ret</span><span class="o">.</span><span class="n">_old_format_m</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">ArgumentError</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">e</span>
</span><span class='line'>    <span class="k">if</span> <span class="vg">$DEBUG</span>
</span><span class='line'>      <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;  The string:</span><span class="si">#{</span><span class="n">ret</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;  args:</span><span class="si">#{</span><span class="n">args</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">e</span><span class="o">.</span><span class="n">backtrace</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Não esqueça de carregar o arquivo utilizando o método <code>require</code> antes de utiliza-lo. É recomendado que você faça isto em algum arquivo do diretório <code>initializers</code> (talvez seja bom criar um arquivo apenas para esta finalidade). Também recomendo estudar o código acima para entender o que está acontecendo antes de simplesmente sair usando.</p>

<p>Ah, e você também pode definir tipos numéricos assim:</p>

<p>``` ruby</p>

<pre><code>"%&lt;age&gt;d, %&lt;weight&gt;.1f" % {:age =&gt; 10, :weight =&gt; 43.4}
# =&gt; "10, 43.4"
</code></pre>

<p>```</p>

<p>Para mais informações sobre as novidades do Rails, siga-me no Twitter: <a href="http://twitter.com/carlosbrando">@carlosbrando</a>.</p>

<p><a rel="bookmark" href="http://nomedojogo.com/2009/07/20/o-novo-sistema-de-interpolacao-do-ruby-1-9/"></a></p>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Edge Rails: Uma forma simples de carregar dados iniciais no banco de dados]]></title>
<link href="http://nomedojogo.com/2009/05/11/edge-rails-uma-forma-simples-de-carregar-dados-iniciais-no-banco-de-dados/"/>
<updated>2009-05-11T00:00:00-03:00</updated>
<id>http://nomedojogo.com/2009/05/11/edge-rails-uma-forma-simples-de-carregar-dados-iniciais-no-banco-de-dados</id>

      <content type="html"><![CDATA[<p>Eu gosto da forma simples como os desenvolvedores do Ruby on Rails, principalmente David (dhh) resolvem as coisas que lhes incomodam. Desde a primeira versão do Rails se tornou algo comum incluir algumas linhas nas migrations para inserir alguns registros iniciais no banco de dados do projeto.</p>

<p>Alguns desenvolvedores até chegaram a criar projetos na tentativa de “melhorar” a forma de se fazer isso. Eu mesmo já andei usando alguns.</p>

<p>O que David fez, foi simplesmente adicionar um novo arquivo <code>db/seeds.rb</code> nos novos projetos Rails para que possamos incluir este tipo de código. Simples assim.</p>

<p>Depois, no momento de carregar estes registros no seu banco de dados, basta executar o seguinte comando no terminal:</p>

<pre class="textmate-source"><span class="text text_plain"><span class="meta meta_paragraph meta_paragraph_text">rake db:seed</span></span></pre>


<p>O comando já existente <code>rake db:setup</code> também foi alterado para incluir esta funcionalidade.</p>

<p><a rel="bookmark" href="http://nomedojogo.com/2009/05/11/edge-rails-uma-forma-simples-de-carregar-dados-iniciais-no-banco-de-dados/"></a></p>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Edge Rails: ActiveRecord::Base#touch]]></title>
<link href="http://nomedojogo.com/2009/04/23/edge-rails-activerecordbasetouch/"/>
<updated>2009-04-23T00:00:00-03:00</updated>
<id>http://nomedojogo.com/2009/04/23/edge-rails-activerecordbasetouch</id>

      <content type="html"><![CDATA[<p>A próxima versão do Rails contará com um novo método chamado <code>touch</code> em todos os objetos do ActiveRecord, o método basicamente serve para atualizar os campos <code>updated_at</code> e <code>updated_on</code> do registro atual com a data e hora corrente. Veja abaixo a implementação do método:</p>

<pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="meta meta_function meta_function_method meta_function_method_with-arguments meta_function_method_with-arguments_ruby"><span class="keyword keyword_control keyword_control_def keyword_control_def_ruby">def</span> <span class="entity entity_name entity_name_function entity_name_function_ruby">touch</span><span class="punctuation punctuation_definition punctuation_definition_parameters punctuation_definition_parameters_ruby">(</span><span class="variable variable_parameter variable_parameter_function variable_parameter_function_ruby">attribute <span class="keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_ruby">=</span> <span class="constant constant_language constant_language_ruby">nil</span></span><span class="punctuation punctuation_definition punctuation_definition_parameters punctuation_definition_parameters_ruby">)</span></span>
  current_time <span class="keyword keyword_operator keyword_operator_assignment keyword_operator_assignment_ruby">=</span> current_time_from_proper_timezone

  <span class="keyword keyword_control keyword_control_ruby">if</span> attribute
    write_attribute<span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">(</span>attribute<span class="punctuation punctuation_separator punctuation_separator_object punctuation_separator_object_ruby">,</span> current_time<span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">)</span>
  <span class="keyword keyword_control keyword_control_ruby">else</span>
    write_attribute<span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">(</span><span class="string string_quoted string_quoted_single string_quoted_single_ruby"><span class="punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_ruby">'</span>updated_at<span class="punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_ruby">'</span></span><span class="punctuation punctuation_separator punctuation_separator_object punctuation_separator_object_ruby">,</span> current_time<span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">)</span> <span class="keyword keyword_control keyword_control_ruby">if</span> <span class="support support_function support_function_actionpack support_function_actionpack_rails">respond_to</span>?<span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">(</span><span class="constant constant_other constant_other_symbol constant_other_symbol_ruby"><span class="punctuation punctuation_definition punctuation_definition_constant punctuation_definition_constant_ruby">:</span>updated_at</span><span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">)</span>
    write_attribute<span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">(</span><span class="string string_quoted string_quoted_single string_quoted_single_ruby"><span class="punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_ruby">'</span>updated_on<span class="punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_ruby">'</span></span><span class="punctuation punctuation_separator punctuation_separator_object punctuation_separator_object_ruby">,</span> current_time<span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">)</span> <span class="keyword keyword_control keyword_control_ruby">if</span> <span class="support support_function support_function_actionpack support_function_actionpack_rails">respond_to</span>?<span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">(</span><span class="constant constant_other constant_other_symbol constant_other_symbol_ruby"><span class="punctuation punctuation_definition punctuation_definition_constant punctuation_definition_constant_ruby">:</span>updated_on</span><span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">)</span>
  <span class="keyword keyword_control keyword_control_ruby">end</span>

  save!
<span class="keyword keyword_control keyword_control_ruby">end</span>
</span></pre>


<p>Como você pode ver na implementação acima ele aceita um parâmetro <code>attribute</code>. Utilizaremos este parâmetro para informar um campo diferente dos mencionados acima quando for necessário.</p>

<pre class="textmate-source"><span class="source source_ruby source_ruby_rails">product<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>touch <span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby"><span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> atualiza o campo updated_at
</span>product<span class="punctuation punctuation_separator punctuation_separator_method punctuation_separator_method_ruby">.</span>touch<span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">(</span><span class="constant constant_other constant_other_symbol constant_other_symbol_ruby"><span class="punctuation punctuation_definition punctuation_definition_constant punctuation_definition_constant_ruby">:</span>designed_at</span><span class="punctuation punctuation_section punctuation_section_function punctuation_section_function_ruby">)</span> <span class="comment comment_line comment_line_number-sign comment_line_number-sign_ruby"><span class="punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_ruby">#</span> atualiza o campo designed_at</span></span></pre>


<p>Esta atualização vale tanto para o Rails 3 como para uma futura provável versão do Rails 2.3.</p>

<p>Graças a este novo método também ganhamos um novo atributo para associações <code>belongs_to</code>, fazendo com que ao criar, atualizar ou apagar um registro filho o método <code>touch</code> do registro pai seja executado. Por exemplo, veja o código abaixo:</p>

<pre class="textmate-source"><span class="source source_ruby source_ruby_rails"><span class="meta meta_rails meta_rails_model"><span class="meta meta_class meta_class_ruby"><span class="keyword keyword_control keyword_control_class keyword_control_class_ruby">class</span> <span class="entity entity_name entity_name_type entity_name_type_class entity_name_type_class_ruby">Pet<span class="entity entity_other entity_other_inherited-class entity_other_inherited-class_ruby"> <span class="punctuation punctuation_separator punctuation_separator_inheritance punctuation_separator_inheritance_ruby">&lt;</span> ActiveRecord::Base</span></span></span>
  <span class="support support_function support_function_activerecord support_function_activerecord_rails">belongs_to</span> <span class="constant constant_other constant_other_symbol constant_other_symbol_ruby"><span class="punctuation punctuation_definition punctuation_definition_constant punctuation_definition_constant_ruby">:</span>owner</span><span class="punctuation punctuation_separator punctuation_separator_object punctuation_separator_object_ruby">,</span> <span class="constant constant_other constant_other_symbol constant_other_symbol_ruby"><span class="punctuation punctuation_definition punctuation_definition_constant punctuation_definition_constant_ruby">:</span>touch</span> <span class="punctuation punctuation_separator punctuation_separator_key-value">=&gt;</span> <span class="constant constant_language constant_language_ruby">true</span>
</span><span class="keyword keyword_control keyword_control_ruby">end</span></span></pre>


<p>A partir do exemplo, quando cadastrarmos ou atualizarmos um animalzinho de estimação (<code>pet</code>), os campos <code>updated_at/on</code> do dono (<code>owner</code>) correspondente serão automaticamente atualizado com a data atual.</p>

<p><a rel="bookmark" href="http://nomedojogo.com/2009/04/23/edge-rails-activerecordbasetouch/"></a></p>

]]></content>
    </entry>
  
</feed>

